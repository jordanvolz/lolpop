#runner config
pipelines: 
  process: OfflineProcess 
  train: OfflineTrain
  deploy: OfflineDeploy
  predict: OfflinePredict
components: 
  metadata_tracker: ContinualMetadataTracker
  metrics_tracker: ContinualMetricsTracker
  resource_version_control: ContinualVersionControl
  notifier: StdOutNotifier
config: 
  table_train: PETFINDER_TRAIN
  table_eval: PETFINDER_TEST
  table_prediction: PETFINDER_PREDICTIONS
  model_name: petfinder_adoption_speed
  model_target: ADOPTIONSPEED
  drop_columns: [NAME, PETID, RESCUERID, DESCRIPTION]
  local_dir: /tmp/artifacts/

#pipelines config
process: 
  components: 
    data_transformer: dbtDataTransformer
    data_profiler: EvidentlyAIDataProfiler
    data_checker: DeepchecksDataChecker
  data_transformer: 
    config: 
      dbt_target: dev
      dbt_profile: petfinder_adoption_prediction
      dbt_profiles_dir: /home/jordanvolz/.dbt/
      dbt_project_dir: /home/jordanvolz/continual-prefect-example/dbt
      data_loader: SnowflakeDataTransformer
  config: 
    k3: v3

train: 
  components: 
    data_splitter: LocalDataSplitter
    hyperparameter_tuner: OptunaHyperparameterTuner
    model_checker: EvidentlyAIModelChecker
    model_explainer: AlibiModelExplainer
    model_visualizer: YellowbrickModelVisualizer
    model_bias_checker: AIFairnessModelBiasChecker
  data_splitter: 
    config: 
      include_test: True
      split_ratio: [0.8,0.1,0.1]
  hyperparameter_tuner: 
    config: 
      param_type: fixed
      training_params: 
        XGBoostModelTrainer: 
          ##dynamic config
          #objective: {"type": "categorical", "choices" : ["multiclass"]}
          #max_depth: {"type": "int", "range" : [4,8]}
          #alpha: {"type": "float", "range" : [1,10]}
          #learning_rate: {"type": "float", "range" : [0.1,1]}
          #n_estimators: {"type": "int", "range" : [1,10]}
          #random_state: {"type": "fixed", "value" : 0}
          #fixed config
          objective: ["multiclass"]
          max_depth: [4,8]
          alpha: [1,5,10]
          learning_rate: [1.0]
          n_estimators: [10]
          random_state: [0]
  model_checker: 
    config: 
      baseline_method: value
      baseline_value: class_avg
  model_explainer: 
    config: 
      explainer_class: TreeShap
  model_bias_checker: 
    config: 
        #the features that you want to check bias on
        protected_attribute_names : ["GENDER", "VACCINATED", "STERILIZED"] 
        # the values of the target variable that are considered good/favorable
        favorable_classes : [0,1]
        # the values of the protected_attribute_names that you believe may be privileged. 
        # Same order as above and each column can take a list of values
        # this should be something like [[1],[1],[1]] 
        privileged_classes:  [[1],[1],[1]]
        # list of groups to consider privilege/unprivilege. 
        # Each "group" is a dict of values of protected_attributes
        # 'AND' logic is applied between members of a dict, and 'OR' between dicts in the list
        #GENDER=1 AND VACCINATED=1 AND STERILIZED=1
        privileged_groups :   [{"GENDER" : 1, "VACCINATED":1, "STERILIZED":1}] 
        #GENDER=0 OR VACCINATED=0 OR STERILIZED=0
        unprivileged_groups : [{"GENDER" : 0}, {"VACCINATED":0}, {"STERILIZED":0}] 
  config: 
      metrics: ["accuracy", "f1", "precision", "recall"]
      perf_metric: f1
      retrain_all: True 

deploy: 
  components: 
    model_repository: ContinualModelRepository
    model_deployer: SeldonModelDeployer
  config: 
    k4: v4

predict: 
  config: 
    k2: v2

#component config
metadata_tracker: 
  config: 
    continual_endpoint: https://sdk.continual.ai 
    continual_apikey: apikey/8935447e76934054b5aac24c9829e72f
    continual_project: c2-testing
    continual_environment: production
metrics_tracker: 
  config: 
    continual_endpoint: $metadata_tracker.config.continual_endpoint
    continual_apikey: $metadata_tracker.config.continual_apikey
    continual_project: $metadata_tracker.config.continual_project
    continual_environment: $metadata_tracker.config.continual_environment
resource_version_control:
  config: 
    dvc_dir: /home/jordanvolz/continual-prefect-example/dvc
    dvc_remote: gcloud
    local_dir: /tmp/artifacts/
notifier: 
  config: 
    gcloud_credentials_file: /home/jordanvolz/.config/gcloud/email-notification-account.json
    gcloud_credentials_token: /home/jordanvolz/.config/gcloud/email-notification-account-token.json
    receipient_email: jordan@continual.ai
    sender_email: mlops-jumpstart@continual.ai